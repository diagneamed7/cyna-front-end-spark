// src/services/api/categories.ts - Service pour la gestion des cat√©gories

import { ApiClient } from './client';
import { API_ENDPOINTS } from '../../config/api';

export interface Category {
  idCategorie: number;
  nom: string;
  description: string;
  image?: string;
  statut?: 'actif' | 'inactif';
  date_creation?: string;
  date_modification?: string;
  nombre_produits?: number;
}

export interface CreateCategoryRequest {
  nom: string;
  description: string;
  image?: string;
  statut?: 'actif' | 'inactif';
}

export interface UpdateCategoryRequest extends Partial<CreateCategoryRequest> {
  idCategorie: number;
}

export interface CategoryFilters {
  search?: string;
  statut?: 'actif' | 'inactif';
  avec_produits?: boolean;
}

export interface CategoryListResponse {
  categories: Category[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

export class CategoryService {
  private client: ApiClient;

  constructor() {
    this.client = new ApiClient();
  }

  // =============================================================================
  // CRUD OPERATIONS
  // =============================================================================

  /**
   * R√©cup√©rer toutes les cat√©gories avec pagination et filtres
   */
  async getCategories(
    page: number = 1,
    limit: number = 20,
    filters?: CategoryFilters
  ): Promise<CategoryListResponse> {
    try {
      const params = new URLSearchParams({
        page: page.toString(),
        limit: limit.toString(),
        ...(filters?.search && { search: filters.search }),
        ...(filters?.statut && { statut: filters.statut }),
        ...(filters?.avec_produits && { avec_produits: filters.avec_produits.toString() })
      });

      const response = await this.client.get<CategoryListResponse>(
        `${API_ENDPOINTS.CATEGORIES.BASE}?${params.toString()}`
      );

      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des cat√©gories:', error);
      throw new Error('Impossible de r√©cup√©rer les cat√©gories');
    }
  }

  /**
   * R√©cup√©rer toutes les cat√©gories (sans pagination)
   */
  async getAllCategories(): Promise<Category[]> {
    try {
      const response = await this.client.get<Category[]>(
        API_ENDPOINTS.CATEGORIES.BASE
      );
      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de toutes les cat√©gories:', error);
      throw new Error('Impossible de r√©cup√©rer les cat√©gories');
    }
  }

  /**
   * R√©cup√©rer une cat√©gorie par son ID
   */
  async getCategory(id: number): Promise<Category> {
    try {
      const response = await this.client.get<Category>(
        API_ENDPOINTS.CATEGORIES.BY_ID(id)
      );

      return response;
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration de la cat√©gorie ${id}:`, error);
      throw new Error('Impossible de r√©cup√©rer la cat√©gorie');
    }
  }

  /**
   * Cr√©er une nouvelle cat√©gorie
   */
  async createCategory(data: CreateCategoryRequest): Promise<Category> {
    try {
      console.log('üìù Cr√©ation d\'une nouvelle cat√©gorie:', data);

      const response = await this.client.post<Category>(
        API_ENDPOINTS.CATEGORIES.BASE,
        data
      );

      console.log('‚úÖ Cat√©gorie cr√©√©e avec succ√®s:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de la cat√©gorie:', error);
      throw new Error('Impossible de cr√©er la cat√©gorie');
    }
  }

  /**
   * Mettre √† jour une cat√©gorie existante
   */
  async updateCategory(data: UpdateCategoryRequest): Promise<Category> {
    try {
      console.log('üìù Mise √† jour de la cat√©gorie:', data);

      const response = await this.client.put<Category>(
        API_ENDPOINTS.CATEGORIES.BY_ID(data.idCategorie),
        data
      );

      console.log('‚úÖ Cat√©gorie mise √† jour avec succ√®s:', response);
      return response;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la mise √† jour de la cat√©gorie ${data.idCategorie}:`, error);
      throw new Error('Impossible de mettre √† jour la cat√©gorie');
    }
  }

  /**
   * Supprimer une cat√©gorie
   */
  async deleteCategory(id: number): Promise<void> {
    try {
      console.log(`üóëÔ∏è Suppression de la cat√©gorie ${id}`);

      await this.client.delete(API_ENDPOINTS.CATEGORIES.BY_ID(id));

      console.log('‚úÖ Cat√©gorie supprim√©e avec succ√®s');
    } catch (error) {
      console.error(`‚ùå Erreur lors de la suppression de la cat√©gorie ${id}:`, error);
      throw new Error('Impossible de supprimer la cat√©gorie');
    }
  }

  // =============================================================================
  // OPERATIONS SP√âCIALES
  // =============================================================================

  /**
   * Rechercher des cat√©gories
   */
  async searchCategories(query: string, limit: number = 10): Promise<Category[]> {
    try {
      const response = await this.client.get<Category[]>(
        `${API_ENDPOINTS.CATEGORIES.BASE}/search?q=${encodeURIComponent(query)}&limit=${limit}`
      );

      return response;
    } catch (error) {
      console.error('Erreur lors de la recherche de cat√©gories:', error);
      throw new Error('Impossible de rechercher les cat√©gories');
    }
  }

  /**
   * R√©cup√©rer les cat√©gories avec le nombre de produits
   */
  async getCategoriesWithProductCount(): Promise<Category[]> {
    try {
      const response = await this.client.get<Category[]>(
        `${API_ENDPOINTS.CATEGORIES.BASE}/with-count`
      );

      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des cat√©gories avec comptage:', error);
      throw new Error('Impossible de r√©cup√©rer les cat√©gories avec comptage');
    }
  }

  /**
   * R√©cup√©rer les cat√©gories populaires (avec le plus de produits)
   */
  async getPopularCategories(limit: number = 10): Promise<Category[]> {
    try {
      const response = await this.client.get<Category[]>(
        `${API_ENDPOINTS.CATEGORIES.BASE}/popular?limit=${limit}`
      );

      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des cat√©gories populaires:', error);
      throw new Error('Impossible de r√©cup√©rer les cat√©gories populaires');
    }
  }

  /**
   * R√©cup√©rer les cat√©gories r√©centes
   */
  async getRecentCategories(limit: number = 10): Promise<Category[]> {
    try {
      const response = await this.client.get<Category[]>(
        `${API_ENDPOINTS.CATEGORIES.BASE}/recent?limit=${limit}`
      );

      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des cat√©gories r√©centes:', error);
      throw new Error('Impossible de r√©cup√©rer les cat√©gories r√©centes');
    }
  }

  /**
   * Changer le statut d'une cat√©gorie
   */
  async updateStatus(categoryId: number, status: 'actif' | 'inactif'): Promise<Category> {
    try {
      console.log(`üîÑ Changement du statut de la cat√©gorie ${categoryId}: ${status}`);

      const response = await this.client.patch<Category>(
        `${API_ENDPOINTS.CATEGORIES.BY_ID(categoryId)}/status`,
        { statut: status }
      );

      console.log('‚úÖ Statut mis √† jour avec succ√®s:', response);
      return response;
    } catch (error) {
      console.error(`‚ùå Erreur lors du changement de statut de la cat√©gorie ${categoryId}:`, error);
      throw new Error('Impossible de changer le statut');
    }
  }

  /**
   * V√©rifier si une cat√©gorie peut √™tre supprim√©e (pas de produits associ√©s)
   */
  async canDeleteCategory(categoryId: number): Promise<boolean> {
    try {
      const category = await this.getCategory(categoryId);
      return (category.nombre_produits || 0) === 0;
    } catch (error) {
      console.error(`Erreur lors de la v√©rification de suppression de la cat√©gorie ${categoryId}:`, error);
      return false;
    }
  }

  /**
   * R√©cup√©rer les statistiques des cat√©gories
   */
  async getCategoryStats(): Promise<{
    total: number;
    actives: number;
    inactives: number;
    avec_produits: number;
    sans_produits: number;
  }> {
    try {
      const response = await this.client.get<{
        total: number;
        actives: number;
        inactives: number;
        avec_produits: number;
        sans_produits: number;
      }>(`${API_ENDPOINTS.CATEGORIES.BASE}/stats`);

      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques des cat√©gories:', error);
      throw new Error('Impossible de r√©cup√©rer les statistiques');
    }
  }

  // =============================================================================
  // UTILITAIRES
  // =============================================================================

  /**
   * V√©rifier si une cat√©gorie est active
   */
  isActive(category: Category): boolean {
    return category.statut === 'actif';
  }

  /**
   * V√©rifier si une cat√©gorie a des produits
   */
  hasProducts(category: Category): boolean {
    return (category.nombre_produits || 0) > 0;
  }

  /**
   * Obtenir le statut d'affichage d'une cat√©gorie
   */
  getStatusDisplay(status: 'actif' | 'inactif'): { label: string; color: string } {
    switch (status) {
      case 'actif':
        return { label: 'Active', color: 'green' };
      case 'inactif':
        return { label: 'Inactive', color: 'red' };
      default:
        return { label: 'Inconnu', color: 'gray' };
    }
  }

  /**
   * Formater le nombre de produits pour l'affichage
   */
  formatProductCount(count: number): string {
    if (count === 0) return 'Aucun produit';
    if (count === 1) return '1 produit';
    return `${count} produits`;
  }

  /**
   * Valider les donn√©es d'une cat√©gorie
   */
  validateCategoryData(data: CreateCategoryRequest): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!data.nom || data.nom.trim().length === 0) {
      errors.push('Le nom de la cat√©gorie est requis');
    }

    if (data.nom && data.nom.trim().length < 2) {
      errors.push('Le nom de la cat√©gorie doit contenir au moins 2 caract√®res');
    }

    if (data.nom && data.nom.trim().length > 100) {
      errors.push('Le nom de la cat√©gorie ne peut pas d√©passer 100 caract√®res');
    }

    if (data.description && data.description.length > 500) {
      errors.push('La description ne peut pas d√©passer 500 caract√®res');
    }

    if (data.image && !this.isValidUrl(data.image)) {
      errors.push('L\'URL de l\'image n\'est pas valide');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Valider une URL
   */
  private isValidUrl(url: string): boolean {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }
}

// Export d'une instance par d√©faut
export const categoryService = new CategoryService(); 