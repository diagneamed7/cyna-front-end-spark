
import { API_ENDPOINTS, type PaginatedResponse } from '../../config/api'; // ‚úÖ Import correct
import type { 
  Evenement, 
  CreateEvenementData, 
  EvenementFilters,
  InscriptionEvenementData,
  StatutEvenement
} from '../../types/event';
import type { User } from '../../types/user';
import { apiClient } from './client';
export class EvenementService {
  constructor(private client = apiClient) {}

  // ‚úÖ R√©utiliser les m√™mes helpers que OeuvreService
  private normalizeListResponse<T>(response: any): PaginatedResponse<T> {
    if (response.data && response.data.items) {
      return response;
    }
    
    const dataKey = Object.keys(response).find(key => 
      Array.isArray(response[key]) && !['pagination', 'meta'].includes(key)
    );
    
    if (dataKey && Array.isArray(response[dataKey])) {
      const items = response[dataKey];
      const pagination = response.pagination || response.meta || {};
      
      return {
        data: {
          items,
          pagination: {
            page: pagination.page || 1,
            limit: pagination.limit || items.length,
            total: pagination.total || items.length,
            pages: pagination.pages || pagination.totalPages || Math.ceil((pagination.total || items.length) / (pagination.limit || items.length || 1))
          }
        }
      };
    }
    
    if (Array.isArray(response)) {
      return {
        data: {
          items: response,
          pagination: { page: 1, limit: response.length, total: response.length, pages: 1 }
        }
      };
    }
    
    return {
      data: {
        items: [],
        pagination: { page: 1, limit: 10, total: 0, pages: 0 }
      }
    };
  }

  private extractArrayFromResponse<T>(response: any, possibleKeys: string[] = []): T[] {
    if (Array.isArray(response)) return response;
    if (response.data?.items && Array.isArray(response.data.items)) return response.data.items;
    
    const allKeys = [...possibleKeys, 'evenements', 'events', 'items', 'data', 'results'];
    
    for (const key of allKeys) {
      if (response[key] && Array.isArray(response[key])) {
        return response[key];
      }
    }
    
    return [];
  }

  async getAll(filters: EvenementFilters & { page?: number; limit?: number } = {}): Promise<PaginatedResponse<Evenement>> {
    try {
      console.log('üé≠ R√©cup√©ration des √©v√©nements...', filters);
      
      const response = await this.client.get<any>(
        API_ENDPOINTS.EVENEMENTS.BASE, 
        filters,
        { cache: true }
      );
      
      const normalizedResponse = this.normalizeListResponse<Evenement>(response);
      console.log(`‚úÖ ${normalizedResponse.data.items.length} √©v√©nements r√©cup√©r√©s`);
      return normalizedResponse;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements:', error);
      throw error;
    }
  }

  async getUpcoming(limit: number = 10, wilaya?: number): Promise<Evenement[]> {
    try {
      console.log(`üìÖ R√©cup√©ration des √©v√©nements √† venir (${limit})...`);
      
      const params: any = { limit };
      if (wilaya) params.wilaya = wilaya;
      
      const response = await this.client.get<any>(
        API_ENDPOINTS.EVENEMENTS.UPCOMING,
        params,
        { cache: true }
      );
      
      const evenements = this.extractArrayFromResponse<Evenement>(response, ['evenements']);
      console.log(`‚úÖ ${evenements.length} √©v√©nements √† venir r√©cup√©r√©s`);
      return evenements;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements √† venir:', error);
      return [];
    }
  }

  async getById(id: number): Promise<Evenement> {
    try {
      console.log(`üé™ R√©cup√©ration de l'√©v√©nement ${id}...`);
      
      const response = await this.client.get<Evenement>(
        API_ENDPOINTS.EVENEMENTS.BY_ID(id),
        undefined,
        { cache: true }
      );
      
      console.log(`‚úÖ √âv√©nement "${response.nom_evenement}" r√©cup√©r√©`);
      return response;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration de l'√©v√©nement ${id}:`, error);
      throw error;
    }
  }

  async create(data: CreateEvenementData): Promise<Evenement> {
    try {
      console.log('üéØ Cr√©ation d\'un nouvel √©v√©nement...', data.nom_evenement);
      
      const response = await this.client.post<Evenement>(
        API_ENDPOINTS.EVENEMENTS.BASE, 
        data
      );
      
      console.log(`‚úÖ √âv√©nement "${response.nom_evenement}" cr√©√© avec l'ID ${response.id_evenement}`);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'√©v√©nement:', error);
      throw error;
    }
  }

  async update(id: number, data: Partial<CreateEvenementData>): Promise<Evenement> {
    try {
      console.log(`üìù Mise √† jour de l'√©v√©nement ${id}...`);
      
      const response = await this.client.put<Evenement>(
        API_ENDPOINTS.EVENEMENTS.BY_ID(id), 
        data
      );
      
      console.log(`‚úÖ √âv√©nement "${response.nom_evenement}" mis √† jour`);
      return response;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la mise √† jour de l'√©v√©nement ${id}:`, error);
      throw error;
    }
  }

  async delete(id: number): Promise<void> {
    try {
      console.log(`üóëÔ∏è Suppression de l'√©v√©nement ${id}...`);
      
      await this.client.delete<void>(API_ENDPOINTS.EVENEMENTS.BY_ID(id));
      
      console.log(`‚úÖ √âv√©nement ${id} supprim√©`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la suppression de l'√©v√©nement ${id}:`, error);
      throw error;
    }
  }

  async search(query: string, filters: EvenementFilters = {}): Promise<Evenement[]> {
    try {
      console.log(`üîç Recherche d'√©v√©nements: "${query}"...`);
      
      const response = await this.client.get<any>(
        API_ENDPOINTS.EVENEMENTS.SEARCH, 
        { q: query, ...filters },
        { cache: true }
      );
      
      const evenements = this.extractArrayFromResponse<Evenement>(response, ['evenements', 'results']);
      console.log(`‚úÖ ${evenements.length} √©v√©nements trouv√©s`);
      return evenements;
    } catch (error) {
      console.error('‚ùå Erreur lors de la recherche d\'√©v√©nements:', error);
      return [];
    }
  }

  async getMyEvents(filters: EvenementFilters = {}): Promise<Evenement[]> {
    try {
      console.log('üë§ R√©cup√©ration de mes √©v√©nements...');
      
      const response = await this.client.get<any>(
        API_ENDPOINTS.EVENEMENTS.MY_EVENTS,
        filters,
        { cache: true }
      );
      
      const evenements = this.extractArrayFromResponse<Evenement>(response, ['evenements']);
      console.log(`‚úÖ ${evenements.length} de mes √©v√©nements trouv√©s`);
      return evenements;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de mes √©v√©nements:', error);
      return [];
    }
  }

  async inscrire(id: number, data: InscriptionEvenementData = {}): Promise<void> {
    try {
      console.log(`‚úçÔ∏è Inscription √† l'√©v√©nement ${id}...`);
      
      await this.client.post<void>(
        API_ENDPOINTS.EVENEMENTS.INSCRIPTION(id),
        data
      );
      
      console.log(`‚úÖ Inscription √† l'√©v√©nement ${id} r√©ussie`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'inscription √† l'√©v√©nement ${id}:`, error);
      throw error;
    }
  }

  async desinscrire(id: number): Promise<void> {
    try {
      console.log(`‚ùå D√©sinscription de l'√©v√©nement ${id}...`);
      
      await this.client.delete<void>(
        API_ENDPOINTS.EVENEMENTS.INSCRIPTION(id)
      );
      
      console.log(`‚úÖ D√©sinscription de l'√©v√©nement ${id} r√©ussie`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la d√©sinscription de l'√©v√©nement ${id}:`, error);
      throw error;
    }
  }

  async getParticipants(id: number): Promise<User[]> {
    try {
      console.log(`üë• R√©cup√©ration des participants de l'√©v√©nement ${id}...`);
      
      const response = await this.client.get<any>(
        API_ENDPOINTS.EVENEMENTS.PARTICIPANTS(id),
        undefined,
        { cache: false }
      );
      
      const participants = this.extractArrayFromResponse<User>(response, ['participants', 'users']);
      console.log(`‚úÖ ${participants.length} participants r√©cup√©r√©s`);
      return participants;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration des participants de l'√©v√©nement ${id}:`, error);
      return [];
    }
  }

  async getStatistics(): Promise<any> {
    try {
      console.log('üìä R√©cup√©ration des statistiques des √©v√©nements...');
      
      const response = await this.client.get<any>(
        API_ENDPOINTS.EVENEMENTS.STATISTICS,
        undefined,
        { cache: true }
      );
      
      console.log('‚úÖ Statistiques des √©v√©nements r√©cup√©r√©es');
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
      throw error;
    }
  }

  async getSuggestions(query: string, limit: number = 5): Promise<Evenement[]> {
    try {
      if (query.length < 2) return [];
      
      const response = await this.client.get<any>(
        API_ENDPOINTS.EVENEMENTS.SUGGESTIONS,
        { q: query, limit },
        { cache: true }
      );
      
      return this.extractArrayFromResponse<Evenement>(response, ['evenements', 'suggestions']);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des suggestions:', error);
      return [];
    }
  }
}

export const evenementService = new EvenementService();